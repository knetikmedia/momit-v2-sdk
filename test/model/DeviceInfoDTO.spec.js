/**
 * Momit API
 * momit API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MomitApi);
  }
}(this, function(expect, MomitApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MomitApi.DeviceInfoDTO();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DeviceInfoDTO', function() {
    it('should create an instance of DeviceInfoDTO', function() {
      // uncomment below and update the code to test DeviceInfoDTO
      //var instane = new MomitApi.DeviceInfoDTO();
      //expect(instance).to.be.a(MomitApi.DeviceInfoDTO);
    });

    it('should have the property serialNumber (base name: "serialNumber")', function() {
      // uncomment below and update the code to test the property serialNumber
      //var instane = new MomitApi.DeviceInfoDTO();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new MomitApi.DeviceInfoDTO();
      //expect(instance).to.be();
    });

    it('should have the property subType (base name: "subType")', function() {
      // uncomment below and update the code to test the property subType
      //var instane = new MomitApi.DeviceInfoDTO();
      //expect(instance).to.be();
    });

    it('should have the property registered (base name: "registered")', function() {
      // uncomment below and update the code to test the property registered
      //var instane = new MomitApi.DeviceInfoDTO();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instane = new MomitApi.DeviceInfoDTO();
      //expect(instance).to.be();
    });

    it('should have the property endTimeState (base name: "endTimeState")', function() {
      // uncomment below and update the code to test the property endTimeState
      //var instane = new MomitApi.DeviceInfoDTO();
      //expect(instance).to.be();
    });

    it('should have the property properties (base name: "properties")', function() {
      // uncomment below and update the code to test the property properties
      //var instane = new MomitApi.DeviceInfoDTO();
      //expect(instance).to.be();
    });

    it('should have the property links (base name: "links")', function() {
      // uncomment below and update the code to test the property links
      //var instane = new MomitApi.DeviceInfoDTO();
      //expect(instance).to.be();
    });

    it('should have the property firmwareVersion (base name: "firmwareVersion")', function() {
      // uncomment below and update the code to test the property firmwareVersion
      //var instane = new MomitApi.DeviceInfoDTO();
      //expect(instance).to.be();
    });

    it('should have the property frequencyRadio (base name: "frequencyRadio")', function() {
      // uncomment below and update the code to test the property frequencyRadio
      //var instane = new MomitApi.DeviceInfoDTO();
      //expect(instance).to.be();
    });

    it('should have the property hardwareVersion (base name: "hardwareVersion")', function() {
      // uncomment below and update the code to test the property hardwareVersion
      //var instane = new MomitApi.DeviceInfoDTO();
      //expect(instance).to.be();
    });

    it('should have the property hardwareRevVersion (base name: "hardwareRevVersion")', function() {
      // uncomment below and update the code to test the property hardwareRevVersion
      //var instane = new MomitApi.DeviceInfoDTO();
      //expect(instance).to.be();
    });

    it('should have the property installation (base name: "installation")', function() {
      // uncomment below and update the code to test the property installation
      //var instane = new MomitApi.DeviceInfoDTO();
      //expect(instance).to.be();
    });

    it('should have the property gateway (base name: "gateway")', function() {
      // uncomment below and update the code to test the property gateway
      //var instane = new MomitApi.DeviceInfoDTO();
      //expect(instance).to.be();
    });

    it('should have the property pairedDevice (base name: "pairedDevice")', function() {
      // uncomment below and update the code to test the property pairedDevice
      //var instane = new MomitApi.DeviceInfoDTO();
      //expect(instance).to.be();
    });

  });

}));
