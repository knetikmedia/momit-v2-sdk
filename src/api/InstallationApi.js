/**
 * Momit API
 * momit API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CDeviceSubTypeDTO', 'model/CalendarDTO', 'model/CalendarPeriodDTO', 'model/DeviceDTO', 'model/DevicePropertiesListDTO', 'model/InstallationDTO', 'model/SmartConfigurationDTO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CDeviceSubTypeDTO'), require('../model/CalendarDTO'), require('../model/CalendarPeriodDTO'), require('../model/DeviceDTO'), require('../model/DevicePropertiesListDTO'), require('../model/InstallationDTO'), require('../model/SmartConfigurationDTO'));
  } else {
    // Browser globals (root is window)
    if (!root.MomitApi) {
      root.MomitApi = {};
    }
    root.MomitApi.InstallationApi = factory(root.MomitApi.ApiClient, root.MomitApi.CDeviceSubTypeDTO, root.MomitApi.CalendarDTO, root.MomitApi.CalendarPeriodDTO, root.MomitApi.DeviceDTO, root.MomitApi.DevicePropertiesListDTO, root.MomitApi.InstallationDTO, root.MomitApi.SmartConfigurationDTO);
  }
}(this, function(ApiClient, CDeviceSubTypeDTO, CalendarDTO, CalendarPeriodDTO, DeviceDTO, DevicePropertiesListDTO, InstallationDTO, SmartConfigurationDTO) {
  'use strict';

  /**
   * Installation service.
   * @module api/InstallationApi
   * @version 1.0
   */

  /**
   * Constructs a new InstallationApi. 
   * @alias module:api/InstallationApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the callDelete operation.
     * @callback module:api/InstallationApi~callDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method delete an installation and all dependecies request by id
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} id Id of the installation
     * @param {module:api/InstallationApi~callDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.callDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling callDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCalendar operation.
     * @callback module:api/InstallationApi~createCalendarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CalendarDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method create a calendar in a installation request by parameters
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} installationId Id of the installation
     * @param {module:model/CalendarDTO} body Data of the calendar
     * @param {module:api/InstallationApi~createCalendarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CalendarDTO}
     */
    this.createCalendar = function(installationId, body, callback) {
      var postBody = body;

      // verify the required parameter 'installationId' is set
      if (installationId === undefined || installationId === null) {
        throw new Error("Missing the required parameter 'installationId' when calling createCalendar");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCalendar");
      }


      var pathParams = {
        'installationId': installationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CalendarDTO;

      return this.apiClient.callApi(
        '/installation/{installationId}/calendar', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createInstallation operation.
     * @callback module:api/InstallationApi~createInstallationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstallationDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method create an installation
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {module:model/InstallationDTO} body Data of the installation
     * @param {module:api/InstallationApi~createInstallationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstallationDTO}
     */
    this.createInstallation = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createInstallation");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InstallationDTO;

      return this.apiClient.callApi(
        '/installation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createInstallationDevice operation.
     * @callback module:api/InstallationApi~createInstallationDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method create device in an installation request by parameters
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} id Id of the installation
     * @param {module:model/DeviceDTO} body Data of the device
     * @param {module:api/InstallationApi~createInstallationDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceDTO}
     */
    this.createInstallationDevice = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createInstallationDevice");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createInstallationDevice");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DeviceDTO;

      return this.apiClient.callApi(
        '/installation/{id}/device', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPeriod operation.
     * @callback module:api/InstallationApi~createPeriodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CalendarPeriodDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method create a calendar period in a calendar and installation request by parameters
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} installationId Id of the installation
     * @param {Number} calendarId Id of the calendar
     * @param {module:model/CalendarPeriodDTO} body Data of the calendar period
     * @param {module:api/InstallationApi~createPeriodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CalendarPeriodDTO}
     */
    this.createPeriod = function(installationId, calendarId, body, callback) {
      var postBody = body;

      // verify the required parameter 'installationId' is set
      if (installationId === undefined || installationId === null) {
        throw new Error("Missing the required parameter 'installationId' when calling createPeriod");
      }

      // verify the required parameter 'calendarId' is set
      if (calendarId === undefined || calendarId === null) {
        throw new Error("Missing the required parameter 'calendarId' when calling createPeriod");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPeriod");
      }


      var pathParams = {
        'installationId': installationId,
        'calendarId': calendarId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CalendarPeriodDTO;

      return this.apiClient.callApi(
        '/installation/{installationId}/calendar/{calendarId}/period', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCalendar operation.
     * @callback module:api/InstallationApi~deleteCalendarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method delete a calendar request by id
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} installationId Id of the installation
     * @param {Number} calendarId Id of the calendar
     * @param {module:api/InstallationApi~deleteCalendarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCalendar = function(installationId, calendarId, callback) {
      var postBody = null;

      // verify the required parameter 'installationId' is set
      if (installationId === undefined || installationId === null) {
        throw new Error("Missing the required parameter 'installationId' when calling deleteCalendar");
      }

      // verify the required parameter 'calendarId' is set
      if (calendarId === undefined || calendarId === null) {
        throw new Error("Missing the required parameter 'calendarId' when calling deleteCalendar");
      }


      var pathParams = {
        'installationId': installationId,
        'calendarId': calendarId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation/{installationId}/calendar/{calendarId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCalendarPeriod operation.
     * @callback module:api/InstallationApi~deleteCalendarPeriodCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method delete a calendar period request by id
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} installationId Id of the installation
     * @param {Number} calendarId Id of the calendar
     * @param {Number} periodId Id of the calendar period
     * @param {module:api/InstallationApi~deleteCalendarPeriodCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCalendarPeriod = function(installationId, calendarId, periodId, callback) {
      var postBody = null;

      // verify the required parameter 'installationId' is set
      if (installationId === undefined || installationId === null) {
        throw new Error("Missing the required parameter 'installationId' when calling deleteCalendarPeriod");
      }

      // verify the required parameter 'calendarId' is set
      if (calendarId === undefined || calendarId === null) {
        throw new Error("Missing the required parameter 'calendarId' when calling deleteCalendarPeriod");
      }

      // verify the required parameter 'periodId' is set
      if (periodId === undefined || periodId === null) {
        throw new Error("Missing the required parameter 'periodId' when calling deleteCalendarPeriod");
      }


      var pathParams = {
        'installationId': installationId,
        'calendarId': calendarId,
        'periodId': periodId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation/{installationId}/calendar/{calendarId}/period/{periodId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInstallationDevice operation.
     * @callback module:api/InstallationApi~deleteInstallationDeviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method delete a device and all dependecies request by id
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} id Id of the installation
     * @param {Number} serialNumber Id of the device
     * @param {module:api/InstallationApi~deleteInstallationDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteInstallationDevice = function(id, serialNumber, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteInstallationDevice");
      }

      // verify the required parameter 'serialNumber' is set
      if (serialNumber === undefined || serialNumber === null) {
        throw new Error("Missing the required parameter 'serialNumber' when calling deleteInstallationDevice");
      }


      var pathParams = {
        'id': id,
        'serialNumber': serialNumber
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation/{id}/device/{serialNumber}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllPropertiesByDevice operation.
     * @callback module:api/InstallationApi~getAllPropertiesByDeviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns a list of device properties availables for device request by parameters
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} idInstallation Id of the installation
     * @param {Number} serialNumber Id of the device
     * @param {module:api/InstallationApi~getAllPropertiesByDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getAllPropertiesByDevice = function(idInstallation, serialNumber, callback) {
      var postBody = null;

      // verify the required parameter 'idInstallation' is set
      if (idInstallation === undefined || idInstallation === null) {
        throw new Error("Missing the required parameter 'idInstallation' when calling getAllPropertiesByDevice");
      }

      // verify the required parameter 'serialNumber' is set
      if (serialNumber === undefined || serialNumber === null) {
        throw new Error("Missing the required parameter 'serialNumber' when calling getAllPropertiesByDevice");
      }


      var pathParams = {
        'idInstallation': idInstallation,
        'serialNumber': serialNumber
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation/{idInstallation}/device/{serialNumber}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrentUserInstallations operation.
     * @callback module:api/InstallationApi~getCurrentUserInstallationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns a list of installations for the logged user
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {module:api/InstallationApi~getCurrentUserInstallationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getCurrentUserInstallations = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrentWeather operation.
     * @callback module:api/InstallationApi~getCurrentWeatherCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns a current weaher data request by parameters
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} idInstallation Id of the installation
     * @param {Number} serialNumber Id of the device
     * @param {module:api/InstallationApi~getCurrentWeatherCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getCurrentWeather = function(idInstallation, serialNumber, callback) {
      var postBody = null;

      // verify the required parameter 'idInstallation' is set
      if (idInstallation === undefined || idInstallation === null) {
        throw new Error("Missing the required parameter 'idInstallation' when calling getCurrentWeather");
      }

      // verify the required parameter 'serialNumber' is set
      if (serialNumber === undefined || serialNumber === null) {
        throw new Error("Missing the required parameter 'serialNumber' when calling getCurrentWeather");
      }


      var pathParams = {
        'idInstallation': idInstallation,
        'serialNumber': serialNumber
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation/{idInstallation}/device/{serialNumber}/weathercurrent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceAvailability operation.
     * @callback module:api/InstallationApi~getDeviceAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns if the device is available
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} idInstallation Id of the installation
     * @param {Number} serialNumber Id of the device
     * @param {module:api/InstallationApi~getDeviceAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getDeviceAvailability = function(idInstallation, serialNumber, callback) {
      var postBody = null;

      // verify the required parameter 'idInstallation' is set
      if (idInstallation === undefined || idInstallation === null) {
        throw new Error("Missing the required parameter 'idInstallation' when calling getDeviceAvailability");
      }

      // verify the required parameter 'serialNumber' is set
      if (serialNumber === undefined || serialNumber === null) {
        throw new Error("Missing the required parameter 'serialNumber' when calling getDeviceAvailability");
      }


      var pathParams = {
        'idInstallation': idInstallation,
        'serialNumber': serialNumber
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation/{idInstallation}/device/{serialNumber}/availability', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceById operation.
     * @callback module:api/InstallationApi~getDeviceByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns a device data request by parameters
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} idInstallation Id of the installation
     * @param {Number} serialNumber Id of the device
     * @param {module:api/InstallationApi~getDeviceByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getDeviceById = function(idInstallation, serialNumber, callback) {
      var postBody = null;

      // verify the required parameter 'idInstallation' is set
      if (idInstallation === undefined || idInstallation === null) {
        throw new Error("Missing the required parameter 'idInstallation' when calling getDeviceById");
      }

      // verify the required parameter 'serialNumber' is set
      if (serialNumber === undefined || serialNumber === null) {
        throw new Error("Missing the required parameter 'serialNumber' when calling getDeviceById");
      }


      var pathParams = {
        'idInstallation': idInstallation,
        'serialNumber': serialNumber
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation/{idInstallation}/device/{serialNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSmartConfigurationWorkingMode operation.
     * @callback module:api/InstallationApi~getDeviceSmartConfigurationWorkingModeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns a smart configuration request by parameters
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} idInstallation Id of the installation
     * @param {Number} serialNumber Id of the device
     * @param {module:api/InstallationApi~getDeviceSmartConfigurationWorkingModeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getDeviceSmartConfigurationWorkingMode = function(idInstallation, serialNumber, callback) {
      var postBody = null;

      // verify the required parameter 'idInstallation' is set
      if (idInstallation === undefined || idInstallation === null) {
        throw new Error("Missing the required parameter 'idInstallation' when calling getDeviceSmartConfigurationWorkingMode");
      }

      // verify the required parameter 'serialNumber' is set
      if (serialNumber === undefined || serialNumber === null) {
        throw new Error("Missing the required parameter 'serialNumber' when calling getDeviceSmartConfigurationWorkingMode");
      }


      var pathParams = {
        'idInstallation': idInstallation,
        'serialNumber': serialNumber
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation/{idInstallation}/device/{serialNumber}/smartMode', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceStats operation.
     * @callback module:api/InstallationApi~getDeviceStatsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns the stats request by parameters
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} idInstallation Id of the installation
     * @param {Number} serialNumber Id of the device
     * @param {String} from Start date for stats
     * @param {String} to End date for stats
     * @param {String} group Type of the stats
     * @param {module:api/InstallationApi~getDeviceStatsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getDeviceStats = function(idInstallation, serialNumber, from, to, group, callback) {
      var postBody = null;

      // verify the required parameter 'idInstallation' is set
      if (idInstallation === undefined || idInstallation === null) {
        throw new Error("Missing the required parameter 'idInstallation' when calling getDeviceStats");
      }

      // verify the required parameter 'serialNumber' is set
      if (serialNumber === undefined || serialNumber === null) {
        throw new Error("Missing the required parameter 'serialNumber' when calling getDeviceStats");
      }

      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling getDeviceStats");
      }

      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling getDeviceStats");
      }

      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling getDeviceStats");
      }


      var pathParams = {
        'idInstallation': idInstallation,
        'serialNumber': serialNumber
      };
      var queryParams = {
        'from': from,
        'to': to,
        'group': group
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation/{idInstallation}/device/{serialNumber}/stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceStatsCost operation.
     * @callback module:api/InstallationApi~getDeviceStatsCostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns the cost stats request by parameters
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} idInstallation Id of the installation
     * @param {Number} serialNumber Id of the device
     * @param {String} from Start date for stats
     * @param {String} to End date for stats
     * @param {String} group Type of the stats
     * @param {module:api/InstallationApi~getDeviceStatsCostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getDeviceStatsCost = function(idInstallation, serialNumber, from, to, group, callback) {
      var postBody = null;

      // verify the required parameter 'idInstallation' is set
      if (idInstallation === undefined || idInstallation === null) {
        throw new Error("Missing the required parameter 'idInstallation' when calling getDeviceStatsCost");
      }

      // verify the required parameter 'serialNumber' is set
      if (serialNumber === undefined || serialNumber === null) {
        throw new Error("Missing the required parameter 'serialNumber' when calling getDeviceStatsCost");
      }

      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling getDeviceStatsCost");
      }

      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling getDeviceStatsCost");
      }

      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling getDeviceStatsCost");
      }


      var pathParams = {
        'idInstallation': idInstallation,
        'serialNumber': serialNumber
      };
      var queryParams = {
        'from': from,
        'to': to,
        'group': group
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation/{idInstallation}/device/{serialNumber}/statscost', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInfoByDevice operation.
     * @callback module:api/InstallationApi~getInfoByDeviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns a device info request by parameters
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} idInstallation Id of the installation
     * @param {Number} serialNumber Id of the device
     * @param {module:api/InstallationApi~getInfoByDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getInfoByDevice = function(idInstallation, serialNumber, callback) {
      var postBody = null;

      // verify the required parameter 'idInstallation' is set
      if (idInstallation === undefined || idInstallation === null) {
        throw new Error("Missing the required parameter 'idInstallation' when calling getInfoByDevice");
      }

      // verify the required parameter 'serialNumber' is set
      if (serialNumber === undefined || serialNumber === null) {
        throw new Error("Missing the required parameter 'serialNumber' when calling getInfoByDevice");
      }


      var pathParams = {
        'idInstallation': idInstallation,
        'serialNumber': serialNumber
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation/{idInstallation}/device/{serialNumber}/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstallationById operation.
     * @callback module:api/InstallationApi~getInstallationByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns an installation request by id
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} id Id of the installation
     * @param {module:api/InstallationApi~getInstallationByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getInstallationById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstallationById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstallationCalendarPeriods operation.
     * @callback module:api/InstallationApi~getInstallationCalendarPeriodsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method  returns a list of calendar periods in a calendar and installation request by parameters
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} installationId Id of the installation
     * @param {Number} calendarId Id of the calendar
     * @param {module:api/InstallationApi~getInstallationCalendarPeriodsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getInstallationCalendarPeriods = function(installationId, calendarId, callback) {
      var postBody = null;

      // verify the required parameter 'installationId' is set
      if (installationId === undefined || installationId === null) {
        throw new Error("Missing the required parameter 'installationId' when calling getInstallationCalendarPeriods");
      }

      // verify the required parameter 'calendarId' is set
      if (calendarId === undefined || calendarId === null) {
        throw new Error("Missing the required parameter 'calendarId' when calling getInstallationCalendarPeriods");
      }


      var pathParams = {
        'installationId': installationId,
        'calendarId': calendarId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation/{installationId}/calendar/{calendarId}/period', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstallationCalendars operation.
     * @callback module:api/InstallationApi~getInstallationCalendarsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns a list of calendars in an installation request by parameters
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} installationId Id of the installation
     * @param {module:api/InstallationApi~getInstallationCalendarsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getInstallationCalendars = function(installationId, callback) {
      var postBody = null;

      // verify the required parameter 'installationId' is set
      if (installationId === undefined || installationId === null) {
        throw new Error("Missing the required parameter 'installationId' when calling getInstallationCalendars");
      }


      var pathParams = {
        'installationId': installationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation/{installationId}/calendar', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstallationDevices operation.
     * @callback module:api/InstallationApi~getInstallationDevicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns a list of devices request by parameters
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} id Id of the installation
     * @param {module:api/InstallationApi~getInstallationDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getInstallationDevices = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstallationDevices");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation/{id}/device', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPropertiesById operation.
     * @callback module:api/InstallationApi~getPropertiesByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns a device property in an installation and device request by parameters
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} idInstallation Id of the installation
     * @param {Number} serialNumber Id of the device
     * @param {Number} id Id of the property
     * @param {module:api/InstallationApi~getPropertiesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getPropertiesById = function(idInstallation, serialNumber, id, callback) {
      var postBody = null;

      // verify the required parameter 'idInstallation' is set
      if (idInstallation === undefined || idInstallation === null) {
        throw new Error("Missing the required parameter 'idInstallation' when calling getPropertiesById");
      }

      // verify the required parameter 'serialNumber' is set
      if (serialNumber === undefined || serialNumber === null) {
        throw new Error("Missing the required parameter 'serialNumber' when calling getPropertiesById");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPropertiesById");
      }


      var pathParams = {
        'idInstallation': idInstallation,
        'serialNumber': serialNumber,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation/{idInstallation}/device/{serialNumber}/property/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWeather operation.
     * @callback module:api/InstallationApi~getWeatherCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns a forecast weather data request by parameters
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} idInstallation Id of the installation
     * @param {Number} serialNumber Id of the device
     * @param {module:api/InstallationApi~getWeatherCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getWeather = function(idInstallation, serialNumber, callback) {
      var postBody = null;

      // verify the required parameter 'idInstallation' is set
      if (idInstallation === undefined || idInstallation === null) {
        throw new Error("Missing the required parameter 'idInstallation' when calling getWeather");
      }

      // verify the required parameter 'serialNumber' is set
      if (serialNumber === undefined || serialNumber === null) {
        throw new Error("Missing the required parameter 'serialNumber' when calling getWeather");
      }


      var pathParams = {
        'idInstallation': idInstallation,
        'serialNumber': serialNumber
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation/{idInstallation}/device/{serialNumber}/weather', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyCalendarPeriod operation.
     * @callback module:api/InstallationApi~modifyCalendarPeriodCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method update the calendar period request by parameters
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} installationId Id of the installation
     * @param {Number} calendarId Id of the calendar
     * @param {Number} periodId Id of the calendar period
     * @param {module:model/CalendarPeriodDTO} body Data of the calendar period
     * @param {module:api/InstallationApi~modifyCalendarPeriodCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.modifyCalendarPeriod = function(installationId, calendarId, periodId, body, callback) {
      var postBody = body;

      // verify the required parameter 'installationId' is set
      if (installationId === undefined || installationId === null) {
        throw new Error("Missing the required parameter 'installationId' when calling modifyCalendarPeriod");
      }

      // verify the required parameter 'calendarId' is set
      if (calendarId === undefined || calendarId === null) {
        throw new Error("Missing the required parameter 'calendarId' when calling modifyCalendarPeriod");
      }

      // verify the required parameter 'periodId' is set
      if (periodId === undefined || periodId === null) {
        throw new Error("Missing the required parameter 'periodId' when calling modifyCalendarPeriod");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling modifyCalendarPeriod");
      }


      var pathParams = {
        'installationId': installationId,
        'calendarId': calendarId,
        'periodId': periodId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation/{installationId}/calendar/{calendarId}/period/{periodId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putDeviceSmartConfigurationWorkingMode operation.
     * @callback module:api/InstallationApi~putDeviceSmartConfigurationWorkingModeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SmartConfigurationDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method create a smart configuration request by parameters
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} idInstallation Id of the installation
     * @param {Number} serialNumber Id of the device
     * @param {module:model/SmartConfigurationDTO} body Data of the smart mode
     * @param {module:api/InstallationApi~putDeviceSmartConfigurationWorkingModeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SmartConfigurationDTO}
     */
    this.putDeviceSmartConfigurationWorkingMode = function(idInstallation, serialNumber, body, callback) {
      var postBody = body;

      // verify the required parameter 'idInstallation' is set
      if (idInstallation === undefined || idInstallation === null) {
        throw new Error("Missing the required parameter 'idInstallation' when calling putDeviceSmartConfigurationWorkingMode");
      }

      // verify the required parameter 'serialNumber' is set
      if (serialNumber === undefined || serialNumber === null) {
        throw new Error("Missing the required parameter 'serialNumber' when calling putDeviceSmartConfigurationWorkingMode");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putDeviceSmartConfigurationWorkingMode");
      }


      var pathParams = {
        'idInstallation': idInstallation,
        'serialNumber': serialNumber
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json'];
      var returnType = SmartConfigurationDTO;

      return this.apiClient.callApi(
        '/installation/{idInstallation}/device/{serialNumber}/smartMode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setUp operation.
     * @callback module:api/InstallationApi~setUpCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method create a set up for the device and installation request by parameters
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} idInstallation Id of the installation
     * @param {Number} serialNumber Id of the device
     * @param {module:model/CDeviceSubTypeDTO} body Data of the systeType
     * @param {module:api/InstallationApi~setUpCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setUp = function(idInstallation, serialNumber, body, callback) {
      var postBody = body;

      // verify the required parameter 'idInstallation' is set
      if (idInstallation === undefined || idInstallation === null) {
        throw new Error("Missing the required parameter 'idInstallation' when calling setUp");
      }

      // verify the required parameter 'serialNumber' is set
      if (serialNumber === undefined || serialNumber === null) {
        throw new Error("Missing the required parameter 'serialNumber' when calling setUp");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setUp");
      }


      var pathParams = {
        'idInstallation': idInstallation,
        'serialNumber': serialNumber
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation/{idInstallation}/device/{serialNumber}/setUp', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the startPairing operation.
     * @callback module:api/InstallationApi~startPairingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method create a paired to devices request by parameters
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} idInstallation Id of the installation
     * @param {Number} serialNumberMaster Id of the master device
     * @param {Number} serialNumberSlave Id of the slave device
     * @param {module:api/InstallationApi~startPairingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.startPairing = function(idInstallation, serialNumberMaster, serialNumberSlave, callback) {
      var postBody = null;

      // verify the required parameter 'idInstallation' is set
      if (idInstallation === undefined || idInstallation === null) {
        throw new Error("Missing the required parameter 'idInstallation' when calling startPairing");
      }

      // verify the required parameter 'serialNumberMaster' is set
      if (serialNumberMaster === undefined || serialNumberMaster === null) {
        throw new Error("Missing the required parameter 'serialNumberMaster' when calling startPairing");
      }

      // verify the required parameter 'serialNumberSlave' is set
      if (serialNumberSlave === undefined || serialNumberSlave === null) {
        throw new Error("Missing the required parameter 'serialNumberSlave' when calling startPairing");
      }


      var pathParams = {
        'idInstallation': idInstallation,
        'serialNumberMaster': serialNumberMaster,
        'serialNumberSlave': serialNumberSlave
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation/{idInstallation}/device/{serialNumberMaster}/startPairing/{serialNumberSlave}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the update operation.
     * @callback module:api/InstallationApi~updateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method update an installation request by id
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} id Id of the installation
     * @param {module:model/InstallationDTO} body Data of the installation
     * @param {module:api/InstallationApi~updateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.update = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling update");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling update");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCalendar operation.
     * @callback module:api/InstallationApi~updateCalendarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method update the calendar request by parameters
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} installationId Id of the installation
     * @param {Number} calendarId Id of the calendar
     * @param {module:model/CalendarDTO} body Data of the calendar
     * @param {module:api/InstallationApi~updateCalendarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateCalendar = function(installationId, calendarId, body, callback) {
      var postBody = body;

      // verify the required parameter 'installationId' is set
      if (installationId === undefined || installationId === null) {
        throw new Error("Missing the required parameter 'installationId' when calling updateCalendar");
      }

      // verify the required parameter 'calendarId' is set
      if (calendarId === undefined || calendarId === null) {
        throw new Error("Missing the required parameter 'calendarId' when calling updateCalendar");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateCalendar");
      }


      var pathParams = {
        'installationId': installationId,
        'calendarId': calendarId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation/{installationId}/calendar/{calendarId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceProperty operation.
     * @callback module:api/InstallationApi~updateDevicePropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method update a device property in an installation and device request by parameters
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} idInstallation Id of the installation
     * @param {Number} serialNumber Id of the device
     * @param {module:model/DevicePropertiesListDTO} body Data of the properties
     * @param {module:api/InstallationApi~updateDevicePropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateDeviceProperty = function(idInstallation, serialNumber, body, callback) {
      var postBody = body;

      // verify the required parameter 'idInstallation' is set
      if (idInstallation === undefined || idInstallation === null) {
        throw new Error("Missing the required parameter 'idInstallation' when calling updateDeviceProperty");
      }

      // verify the required parameter 'serialNumber' is set
      if (serialNumber === undefined || serialNumber === null) {
        throw new Error("Missing the required parameter 'serialNumber' when calling updateDeviceProperty");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateDeviceProperty");
      }


      var pathParams = {
        'idInstallation': idInstallation,
        'serialNumber': serialNumber
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation/{idInstallation}/device/{serialNumber}/properties', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInstallationDevice operation.
     * @callback module:api/InstallationApi~updateInstallationDeviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method update a device request by id
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} id Id of the installation
     * @param {Number} serialNumber Id of the device
     * @param {module:model/DeviceDTO} body Data of the device
     * @param {module:api/InstallationApi~updateInstallationDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateInstallationDevice = function(id, serialNumber, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateInstallationDevice");
      }

      // verify the required parameter 'serialNumber' is set
      if (serialNumber === undefined || serialNumber === null) {
        throw new Error("Missing the required parameter 'serialNumber' when calling updateInstallationDevice");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateInstallationDevice");
      }


      var pathParams = {
        'id': id,
        'serialNumber': serialNumber
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation/{id}/device/{serialNumber}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSmartConfiguration operation.
     * @callback module:api/InstallationApi~updateSmartConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method update the smart configuration request by parameters
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} idInstallation Id of the installation
     * @param {Number} serialNumber Id of the device
     * @param {module:model/SmartConfigurationDTO} body Data of the smart mode
     * @param {module:api/InstallationApi~updateSmartConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateSmartConfiguration = function(idInstallation, serialNumber, body, callback) {
      var postBody = body;

      // verify the required parameter 'idInstallation' is set
      if (idInstallation === undefined || idInstallation === null) {
        throw new Error("Missing the required parameter 'idInstallation' when calling updateSmartConfiguration");
      }

      // verify the required parameter 'serialNumber' is set
      if (serialNumber === undefined || serialNumber === null) {
        throw new Error("Missing the required parameter 'serialNumber' when calling updateSmartConfiguration");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSmartConfiguration");
      }


      var pathParams = {
        'idInstallation': idInstallation,
        'serialNumber': serialNumber
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/installation/{idInstallation}/device/{serialNumber}/smartMode', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
