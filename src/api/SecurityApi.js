/**
 * Momit API
 * momit API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/TokenDTO', 'model/UserDTO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/TokenDTO'), require('../model/UserDTO'));
  } else {
    // Browser globals (root is window)
    if (!root.MomitApi) {
      root.MomitApi = {};
    }
    root.MomitApi.SecurityApi = factory(root.MomitApi.ApiClient, root.MomitApi.TokenDTO, root.MomitApi.UserDTO);
  }
}(this, function(ApiClient, TokenDTO, UserDTO) {
  'use strict';

  /**
   * Security service.
   * @module api/SecurityApi
   * @version 1.0
   */

  /**
   * Constructs a new SecurityApi. 
   * @alias module:api/SecurityApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the changeUserPass operation.
     * @callback module:api/SecurityApi~changeUserPassCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method change the password for user connected
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {module:model/UserDTO} body Data of the user
     * @param {module:api/SecurityApi~changeUserPassCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.changeUserPass = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling changeUserPass");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/security/changePassword', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSessionToken operation.
     * @callback module:api/SecurityApi~getSessionTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method create a session for the user
     * xxxxxxxxxxxxxxxxxxxxxxx
     * @param {module:model/TokenDTO} body Data of the token
     * @param {String} invitationToken Token string
     * @param {module:api/SecurityApi~getSessionTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getSessionToken = function(body, invitationToken, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getSessionToken");
      }

      // verify the required parameter 'invitationToken' is set
      if (invitationToken === undefined || invitationToken === null) {
        throw new Error("Missing the required parameter 'invitationToken' when calling getSessionToken");
      }


      var pathParams = {
      };
      var queryParams = {
        'invitationToken': invitationToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/security/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getloginToken operation.
     * @callback module:api/SecurityApi~getloginTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method create a connect for the user
     * This method response a token that is necessary for the login method
     * @param {module:model/UserDTO} body Data of the user
     * @param {module:api/SecurityApi~getloginTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getloginToken = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getloginToken");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/security/connect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logout operation.
     * @callback module:api/SecurityApi~logoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method remove the session for the user
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {module:api/SecurityApi~logoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.logout = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/security/login', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreUserPass operation.
     * @callback module:api/SecurityApi~restoreUserPassCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method send a email to user for restore password
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} email Email string
     * @param {module:api/SecurityApi~restoreUserPassCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.restoreUserPass = function(email, callback) {
      var postBody = null;

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling restoreUserPass");
      }


      var pathParams = {
      };
      var queryParams = {
        'email': email
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/security/restorePassword', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
