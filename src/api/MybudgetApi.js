/**
 * Momit API
 * momit API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/MyBudgetDeviceDTO', 'model/MyBudgetHvacPowerDTO', 'model/MyBudgetRateDTO', 'model/MyBudgetRatePeriodDTO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/MyBudgetDeviceDTO'), require('../model/MyBudgetHvacPowerDTO'), require('../model/MyBudgetRateDTO'), require('../model/MyBudgetRatePeriodDTO'));
  } else {
    // Browser globals (root is window)
    if (!root.MomitApi) {
      root.MomitApi = {};
    }
    root.MomitApi.MybudgetApi = factory(root.MomitApi.ApiClient, root.MomitApi.MyBudgetDeviceDTO, root.MomitApi.MyBudgetHvacPowerDTO, root.MomitApi.MyBudgetRateDTO, root.MomitApi.MyBudgetRatePeriodDTO);
  }
}(this, function(ApiClient, MyBudgetDeviceDTO, MyBudgetHvacPowerDTO, MyBudgetRateDTO, MyBudgetRatePeriodDTO) {
  'use strict';

  /**
   * Mybudget service.
   * @module api/MybudgetApi
   * @version 1.0
   */

  /**
   * Constructs a new MybudgetApi. 
   * @alias module:api/MybudgetApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addHvacPower operation.
     * @callback module:api/MybudgetApi~addHvacPowerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method create or update configuration of device in MyBudget
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} id Id of the device
     * @param {module:model/MyBudgetHvacPowerDTO} body Data of the hvacpower
     * @param {module:api/MybudgetApi~addHvacPowerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addHvacPower = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addHvacPower");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addHvacPower");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/mybudget/device/{id}/hvacpower', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addRate operation.
     * @callback module:api/MybudgetApi~addRateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MyBudgetRateDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method create the rate request by parameter
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} id Id of the device
     * @param {module:model/MyBudgetRateDTO} body Data of the rate
     * @param {module:api/MybudgetApi~addRateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MyBudgetRateDTO}
     */
    this.addRate = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addRate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addRate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MyBudgetRateDTO;

      return this.apiClient.callApi(
        '/mybudget/device/{id}/rate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addRate_0 operation.
     * @callback module:api/MybudgetApi~addRate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/MyBudgetRatePeriodDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method create the rate period request by parameter
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} id Id of the rate
     * @param {module:model/MyBudgetRatePeriodDTO} body Data of the rate period
     * @param {module:api/MybudgetApi~addRate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MyBudgetRatePeriodDTO}
     */
    this.addRate_0 = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addRate_0");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addRate_0");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MyBudgetRatePeriodDTO;

      return this.apiClient.callApi(
        '/mybudget/rate/{id}/rateperiod', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteHvacPower operation.
     * @callback module:api/MybudgetApi~deleteHvacPowerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method remove the device configuration in MyBudget
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} id Id of the device
     * @param {module:api/MybudgetApi~deleteHvacPowerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteHvacPower = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteHvacPower");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/mybudget/device/{id}/hvacpower', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRate operation.
     * @callback module:api/MybudgetApi~deleteRateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method remove the rate request by parameter in MyBudget
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} id Id of the rate
     * @param {module:api/MybudgetApi~deleteRateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRate = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/mybudget/rate/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRatePeriod operation.
     * @callback module:api/MybudgetApi~deleteRatePeriodCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method remove the rate period request by parameter in MyBudget
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} id Id of the rate period
     * @param {module:api/MybudgetApi~deleteRatePeriodCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRatePeriod = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRatePeriod");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/mybudget/rateperiod/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDevice operation.
     * @callback module:api/MybudgetApi~getDeviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method return the device in MyBudget
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} id Id of the device
     * @param {module:api/MybudgetApi~getDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getDevice = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDevice");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/mybudget/device/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEnergyUnitById operation.
     * @callback module:api/MybudgetApi~getEnergyUnitByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns the list of energy units availables in the API
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {module:api/MybudgetApi~getEnergyUnitByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getEnergyUnitById = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/mybudget/energyunit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEnergyUnitById_0 operation.
     * @callback module:api/MybudgetApi~getEnergyUnitById_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns the energy unit request by id
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} id Id of the energyunit
     * @param {module:api/MybudgetApi~getEnergyUnitById_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getEnergyUnitById_0 = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEnergyUnitById_0");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/mybudget/energyunit/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHvacPower operation.
     * @callback module:api/MybudgetApi~getHvacPowerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method return the device configuration in MyBudget
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} id Id of the device
     * @param {module:api/MybudgetApi~getHvacPowerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getHvacPower = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getHvacPower");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/mybudget/device/{id}/hvacpower', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPrediction operation.
     * @callback module:api/MybudgetApi~getPredictionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns the prediction data for the device
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} id Id of the device
     * @param {module:api/MybudgetApi~getPredictionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getPrediction = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPrediction");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/mybudget/device/{id}/prediction', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRateById operation.
     * @callback module:api/MybudgetApi~getRateByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns the rate request by id
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} id Id of the rate
     * @param {module:api/MybudgetApi~getRateByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getRateById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRateById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/mybudget/rate/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRatePeriodById operation.
     * @callback module:api/MybudgetApi~getRatePeriodByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns the rate period request by id
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} id Id of the rate period
     * @param {module:api/MybudgetApi~getRatePeriodByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getRatePeriodById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRatePeriodById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/mybudget/rateperiod/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRatesByDevice operation.
     * @callback module:api/MybudgetApi~getRatesByDeviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns the rates request by device id
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} id Id of the device
     * @param {module:api/MybudgetApi~getRatesByDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getRatesByDevice = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRatesByDevice");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/mybudget/device/{id}/rate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRatesPeriodByRate operation.
     * @callback module:api/MybudgetApi~getRatesPeriodByRateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns the rate periods request by rate id
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} id Id of the rate
     * @param {module:api/MybudgetApi~getRatesPeriodByRateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getRatesPeriodByRate = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRatesPeriodByRate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/mybudget/rate/{id}/rateperiod', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGoalCost operation.
     * @callback module:api/MybudgetApi~updateGoalCostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method update the goal cost request by parameter in MyBudget
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} id Id of the device
     * @param {module:model/MyBudgetDeviceDTO} body Data of the goalCost
     * @param {module:api/MybudgetApi~updateGoalCostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateGoalCost = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateGoalCost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateGoalCost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/mybudget/device/{id}/goalcost', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRate operation.
     * @callback module:api/MybudgetApi~updateRateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MyBudgetRateDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method update the rate request by parameter
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} id Id of the rate
     * @param {module:model/MyBudgetRateDTO} body Data of the rate
     * @param {module:api/MybudgetApi~updateRateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MyBudgetRateDTO}
     */
    this.updateRate = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MyBudgetRateDTO;

      return this.apiClient.callApi(
        '/mybudget/rate/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRatePeriod operation.
     * @callback module:api/MybudgetApi~updateRatePeriodCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method update the rate period request by parameter
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} id Id of the rate period
     * @param {module:model/MyBudgetRatePeriodDTO} body Data of the rate period
     * @param {module:api/MybudgetApi~updateRatePeriodCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateRatePeriod = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRatePeriod");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRatePeriod");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/mybudget/rateperiod/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
