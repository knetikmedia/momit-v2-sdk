/**
 * Momit API
 * momit API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GeolocationCoordinatesDTO', 'model/InputStream', 'model/UserDTO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GeolocationCoordinatesDTO'), require('../model/InputStream'), require('../model/UserDTO'));
  } else {
    // Browser globals (root is window)
    if (!root.MomitApi) {
      root.MomitApi = {};
    }
    root.MomitApi.UserApi = factory(root.MomitApi.ApiClient, root.MomitApi.GeolocationCoordinatesDTO, root.MomitApi.InputStream, root.MomitApi.UserDTO);
  }
}(this, function(ApiClient, GeolocationCoordinatesDTO, InputStream, UserDTO) {
  'use strict';

  /**
   * User service.
   * @module api/UserApi
   * @version 1.0
   */

  /**
   * Constructs a new UserApi. 
   * @alias module:api/UserApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the create operation.
     * @callback module:api/UserApi~createCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method create an user
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {module:model/UserDTO} body Data of the user
     * @param {String} invitationToken InvitationToken string
     * @param {module:api/UserApi~createCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDTO}
     */
    this.create = function(body, invitationToken, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling create");
      }

      // verify the required parameter 'invitationToken' is set
      if (invitationToken === undefined || invitationToken === null) {
        throw new Error("Missing the required parameter 'invitationToken' when calling create");
      }


      var pathParams = {
      };
      var queryParams = {
        'invitationToken': invitationToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserDTO;

      return this.apiClient.callApi(
        '/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLoggedUser operation.
     * @callback module:api/UserApi~deleteLoggedUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method delete the logged user and all dependecies
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {module:api/UserApi~deleteLoggedUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteLoggedUser = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/user', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrentUserInfo operation.
     * @callback module:api/UserApi~getCurrentUserInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns the logged user
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {module:api/UserApi~getCurrentUserInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getCurrentUserInfo = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageById operation.
     * @callback module:api/UserApi~getImageByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns the user image request by id
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} id Id of the user
     * @param {module:api/UserApi~getImageByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getImageById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getImageById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/{id}/image', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageByUser operation.
     * @callback module:api/UserApi~getImageByUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns the user image for the logged user
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {module:api/UserApi~getImageByUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getImageByUser = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/image', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserById operation.
     * @callback module:api/UserApi~getUserByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns an user request by id
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} id Id of the user
     * @param {module:api/UserApi~getUserByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getUserById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateImage operation.
     * @callback module:api/UserApi~updateImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method update the user image for the logged user
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {module:model/InputStream} body Image file
     * @param {module:api/UserApi~updateImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateImage = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateImage");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/image', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLoggedUser operation.
     * @callback module:api/UserApi~updateLoggedUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method update the logged user
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {module:model/UserDTO} body Data of the user
     * @param {module:api/UserApi~updateLoggedUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateLoggedUser = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateLoggedUser");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLoggedUserLocation operation.
     * @callback module:api/UserApi~updateLoggedUserLocationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method update the location the logged user in all installations
     * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     * @param {module:model/GeolocationCoordinatesDTO} body Data of the location
     * @param {module:api/UserApi~updateLoggedUserLocationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateLoggedUserLocation = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateLoggedUserLocation");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/location', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
