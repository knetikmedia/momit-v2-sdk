/**
 * Momit API
 * momit API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DeviceInfoDTO', 'model/DevicePropertiesDTO', 'model/RestLink'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./DeviceInfoDTO'), require('./DevicePropertiesDTO'), require('./RestLink'));
  } else {
    // Browser globals (root is window)
    if (!root.MomitApi) {
      root.MomitApi = {};
    }
    root.MomitApi.DeviceInfoDTO = factory(root.MomitApi.ApiClient, root.MomitApi.DeviceInfoDTO, root.MomitApi.DevicePropertiesDTO, root.MomitApi.RestLink);
  }
}(this, function(ApiClient, DeviceInfoDTO, DevicePropertiesDTO, RestLink) {
  'use strict';




  /**
   * The DeviceInfoDTO model module.
   * @module model/DeviceInfoDTO
   * @version 1.0
   */

  /**
   * Constructs a new <code>DeviceInfoDTO</code>.
   * @alias module:model/DeviceInfoDTO
   * @class
   */
  var exports = function() {
    var _this = this;
















  };

  /**
   * Constructs a <code>DeviceInfoDTO</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DeviceInfoDTO} obj Optional instance to populate.
   * @return {module:model/DeviceInfoDTO} The populated <code>DeviceInfoDTO</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('serialNumber')) {
        obj['serialNumber'] = ApiClient.convertToType(data['serialNumber'], 'Number');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'Number');
      }
      if (data.hasOwnProperty('subType')) {
        obj['subType'] = ApiClient.convertToType(data['subType'], 'Number');
      }
      if (data.hasOwnProperty('registered')) {
        obj['registered'] = ApiClient.convertToType(data['registered'], 'Boolean');
      }
      if (data.hasOwnProperty('state')) {
        obj['state'] = ApiClient.convertToType(data['state'], 'Number');
      }
      if (data.hasOwnProperty('endTimeState')) {
        obj['endTimeState'] = ApiClient.convertToType(data['endTimeState'], 'Date');
      }
      if (data.hasOwnProperty('properties')) {
        obj['properties'] = ApiClient.convertToType(data['properties'], [DevicePropertiesDTO]);
      }
      if (data.hasOwnProperty('links')) {
        obj['links'] = ApiClient.convertToType(data['links'], [RestLink]);
      }
      if (data.hasOwnProperty('firmwareVersion')) {
        obj['firmwareVersion'] = ApiClient.convertToType(data['firmwareVersion'], 'Number');
      }
      if (data.hasOwnProperty('frequencyRadio')) {
        obj['frequencyRadio'] = ApiClient.convertToType(data['frequencyRadio'], 'String');
      }
      if (data.hasOwnProperty('hardwareVersion')) {
        obj['hardwareVersion'] = ApiClient.convertToType(data['hardwareVersion'], 'String');
      }
      if (data.hasOwnProperty('hardwareRevVersion')) {
        obj['hardwareRevVersion'] = ApiClient.convertToType(data['hardwareRevVersion'], 'String');
      }
      if (data.hasOwnProperty('installation')) {
        obj['installation'] = ApiClient.convertToType(data['installation'], 'Number');
      }
      if (data.hasOwnProperty('gateway')) {
        obj['gateway'] = DeviceInfoDTO.constructFromObject(data['gateway']);
      }
      if (data.hasOwnProperty('pairedDevice')) {
        obj['pairedDevice'] = DeviceInfoDTO.constructFromObject(data['pairedDevice']);
      }
    }
    return obj;
  }

  /**
   * @member {Number} serialNumber
   */
  exports.prototype['serialNumber'] = undefined;
  /**
   * @member {Number} type
   */
  exports.prototype['type'] = undefined;
  /**
   * @member {Number} subType
   */
  exports.prototype['subType'] = undefined;
  /**
   * @member {Boolean} registered
   */
  exports.prototype['registered'] = undefined;
  /**
   * @member {Number} state
   */
  exports.prototype['state'] = undefined;
  /**
   * @member {Date} endTimeState
   */
  exports.prototype['endTimeState'] = undefined;
  /**
   * @member {Array.<module:model/DevicePropertiesDTO>} properties
   */
  exports.prototype['properties'] = undefined;
  /**
   * @member {Array.<module:model/RestLink>} links
   */
  exports.prototype['links'] = undefined;
  /**
   * @member {Number} firmwareVersion
   */
  exports.prototype['firmwareVersion'] = undefined;
  /**
   * @member {String} frequencyRadio
   */
  exports.prototype['frequencyRadio'] = undefined;
  /**
   * @member {String} hardwareVersion
   */
  exports.prototype['hardwareVersion'] = undefined;
  /**
   * @member {String} hardwareRevVersion
   */
  exports.prototype['hardwareRevVersion'] = undefined;
  /**
   * @member {Number} installation
   */
  exports.prototype['installation'] = undefined;
  /**
   * @member {module:model/DeviceInfoDTO} gateway
   */
  exports.prototype['gateway'] = undefined;
  /**
   * @member {module:model/DeviceInfoDTO} pairedDevice
   */
  exports.prototype['pairedDevice'] = undefined;



  return exports;
}));


